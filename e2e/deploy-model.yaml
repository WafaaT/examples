apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: tf-workflow-
spec:
  entrypoint: deploy-model 
  # Parameters can be passed/overridden via the argo CLI.
  # To override the printed message, run `argo submit` with the -p option:
  # $ argo submit examples/arguments-parameters.yaml -p message="goodbye world"
  arguments:
    parameters:
    - name: workflow
      value: workflow-name
  templates:
  - name: deploy-model
    steps:
      - - name: get-workflow-info
          template: get-workflow-info
      - - name: serve-model
          template: tf-inference
          arguments:
            parameters:
            - name: s3-unfinished-url
              value: "{{steps.get-workflow-info.outputs.parameters.s3-unfinished-url}}"
            - name: s3-exported-url
              value: "{{steps.get-workflow-info.outputs.parameters.s3-exported-url}}"
            - name: aws-secret 
              value: "{{steps.get-workflow-info.outputs.parameters.aws-secret}}"
            - name: namespace
              value: "{{steps.get-workflow-info.outputs.parameters.namespace}}"
            - name: aws-region 
              value: "{{steps.get-workflow-info.outputs.parameters.aws-region}}"
            - name: aws-s3-endpoint
              value: "{{steps.get-workflow-info.outputs.parameters.aws-s3-endpoint}}"
            - name: job-name
              value: "{{steps.get-workflow-info.outputs.parameters.job-name}}"
            - name: tf-serving-image 
              value: "{{steps.get-workflow-info.outputs.parameters.tf-serving-image}}"
  - name: get-workflow-info
    container:
      image: nervana/circleci:master
      imagePullPolicy: Always
      command: ["bash", "-c", 'for var in job-name namespace aws-secret aws-region aws-s3-endpoint s3-unfinished-url s3-exported-url tf-serving-image; do kubectl get workflow {{workflow.parameters.workflow}} -o json | jq -r ".status.nodes[] | select(.name|match(\".*get-workflow-info\")) | .outputs.parameters[] | select(.name == \"${var}\" | .value\" > /tmp/${var} ; done']
    outputs:
      parameters:
      - name: s3-unfinished-url
        valueFrom:
          path: /tmp/s3-unfinished-url
      - name: s3-exported-url
        valueFrom:
          path: /tmp/s3-exported-url
      - name: aws-secret
        valueFrom:
          path: /tmp/aws-secret
      - name: namespace
        valueFrom:
          path: /tmp/namespace
      - name: aws-region
        valueFrom:
          path: /tmp/aws-region
      - name: aws-s3-endpoint
        valueFrom:
          path: /tmp/aws-s3-endpoint
      - name: job-name
        valueFrom:
          path: /tmp/job-name
      - name: tf-serving-image
        valueFrom:
          path: /tmp/tf-serving-image
  - name: tf-inference
    script:
      image: elsonrodriguez/ksonnet:0.8.0-test6
      command: ["/ksonnet-entrypoint.sh"]
    inputs:
      parameters:
      - name: s3-unfinished-url
      - name: s3-exported-url
      - name: aws-secret
      - name: namespace
      - name: aws-region
      - name: aws-s3-endpoint
      - name: job-name
      - name: tf-serving-image
      source: |
        MODEL_COMPONENT=serveMnist
        MODEL_PATH={{inputs.parameters.s3-exported-url}}
        MODEL_SERVER_IMAGE={{inputs.parameters.tf-serving-image}}

        ks init my-model-server
        cd my-model-server
        ks registry add kubeflow github.com/elsonrodriguez/kubeflow/tree/serving-s3/kubeflow
        ks pkg install kubeflow/tf-serving@serving-s3
        ks env add default
        # TODO change mnist name to be specific to a job. Right now mnist name is required to serve the model.
        ks generate tf-serving ${MODEL_COMPONENT} --name=mnist-{{inputs.parameters.job-name}} --namespace={{inputs.parameters.namespace}} --model_path=${MODEL_PATH}
        ks param set ${MODEL_COMPONENT} model_server_image ${MODEL_SERVER_IMAGE}
        ks param set ${MODEL_COMPONENT} namespace {{inputs.parameters.namespace}}
        ks param set ${MODEL_COMPONENT} service_type LoadBalancer
        ks param set ${MODEL_COMPONENT} s3_create_secret false
        ks param set ${MODEL_COMPONENT} s3_secret_name {{inputs.parameters.aws-secret}}
        ks param set ${MODEL_COMPONENT} s3_secret_accesskeyid_key_name awsAccessKeyID
        ks param set ${MODEL_COMPONENT} s3_secret_secretaccesskey_key_name awsSecretAccessKey
        ks param set ${MODEL_COMPONENT} s3_aws_region {{inputs.parameters.aws-region}}
        ks param set ${MODEL_COMPONENT} s3_endpoint {{inputs.parameters.s3-endpoint}}
        ks apply default -c ${MODEL_COMPONENT}
      env:
      - name: SERVICE_ACCOUNT
        value: argo
